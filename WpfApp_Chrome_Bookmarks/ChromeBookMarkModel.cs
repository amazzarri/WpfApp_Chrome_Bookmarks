using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [Serializable]
    public partial class Welcome
    {
        [JsonProperty("checksum")]
        public string Checksum { get; set; }

        [JsonProperty("roots")]
        public Roots Roots { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }
    }

    [Serializable]
    public partial class Roots
    {
        [JsonProperty("bookmark_bar")]
        public BookmarkBar BookmarkBar { get; set; }

        [JsonProperty("other")]
        public Other Other { get; set; }

        [JsonProperty("sync_transaction_version")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SyncTransactionVersion { get; set; }

        [JsonProperty("synced")]
        public Synced Synced { get; set; }
    }

    [Serializable]
    public partial class BookmarkBar
    {
        [JsonProperty("children")]
        public BookmarkBarChild[] Children { get; set; }

        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("date_modified")]
        public string DateModified { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    [Serializable]
    public partial class BookmarkBarChild
    {
        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("sync_transaction_version", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SyncTransactionVersion { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("meta_info", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleMetaInfo MetaInfo { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public BookmarkBarChild[] Children { get; set; }

        [JsonProperty("date_modified", NullValueHandling = NullValueHandling.Ignore)]
        public string DateModified { get; set; }
    }

    [Serializable]
    public partial class PurpleMetaInfo
    {
        [JsonProperty("last_visited_desktop")]
        public string LastVisitedDesktop { get; set; }
    }

    [Serializable]
    public partial class Other
    {
        [JsonProperty("children")]
        public List<OtherChild>
            //[] 
            Children { get; set; }

        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("date_modified")]
        public string DateModified { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    [Serializable]
    public partial class OtherChild
    {
        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleChild[] Children { get; set; }

        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("date_modified", NullValueHandling = NullValueHandling.Ignore)]
        public string DateModified { get; set; }

        [JsonProperty("guid")]
        public Guid Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("sync_transaction_version", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SyncTransactionVersion { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("meta_info", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyMetaInfo MetaInfo { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    [Serializable]
    public partial class PurpleChild
    {
        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("meta_info", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyMetaInfo MetaInfo { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public BookmarkBarChild[] Children { get; set; }

        [JsonProperty("date_modified", NullValueHandling = NullValueHandling.Ignore)]
        public string DateModified { get; set; }

        [JsonProperty("sync_transaction_version", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SyncTransactionVersion { get; set; }
    }

    [Serializable]
    public partial class FluffyMetaInfo
    {
        [JsonProperty("last_visited_desktop", NullValueHandling = NullValueHandling.Ignore)]
        public string LastVisitedDesktop { get; set; }

        [JsonProperty("last_visited", NullValueHandling = NullValueHandling.Ignore)]
        public string LastVisited { get; set; }
    }

    [Serializable]
    public partial class Synced
    {
        [JsonProperty("children")]
        public SyncedChild[] Children { get; set; }

        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("date_modified")]
        public string DateModified { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    [Serializable]
    public partial class SyncedChild
    {
        [JsonProperty("date_added")]
        public string DateAdded { get; set; }

        [JsonProperty("guid")]
        public Guid Guid { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("meta_info", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyMetaInfo MetaInfo { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public BookmarkBarChild[] Children { get; set; }

        [JsonProperty("date_modified", NullValueHandling = NullValueHandling.Ignore)]
        public string DateModified { get; set; }
    }

    public enum TypeEnum { Folder, Url };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "folder":
                    return TypeEnum.Folder;
                case "url":
                    return TypeEnum.Url;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Folder:
                    serializer.Serialize(writer, "folder");
                    return;
                case TypeEnum.Url:
                    serializer.Serialize(writer, "url");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}

